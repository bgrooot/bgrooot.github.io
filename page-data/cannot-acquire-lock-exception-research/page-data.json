{"componentChunkName":"component---src-templates-post-tsx","path":"/cannot-acquire-lock-exception-research/","result":{"data":{"markdownRemark":{"html":"<p>내가 지금 회사에서 개발한 것 중에는 사용자에게 보이는 알림과 작품, 시스템에 대한 알림 설정을 관리하는 <code class=\"language-text\">Notification API</code>가 있고 댓글과 작품의 Rating, Like를 관리하는 <code class=\"language-text\">Community API</code>가 있다. 그런데 이 두 서비스에서 빈도는 낮지만, 간혹 <code class=\"language-text\">CannotAcquireLockException</code>이 발생하여 원인을 찾아보려고 했던 과정과 사례를 적어본다. </p>\n<h3 id=\"cannotacquirelockexception\" style=\"position:relative;\"><a href=\"#cannotacquirelockexception\" aria-label=\"cannotacquirelockexception permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CannotAcquireLockException</h3>\n<p><a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/dao/CannotAcquireLockException.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문서</a>에는 이름과 같이 lock을 얻지 못해 발생하는 예외이다. 또한 stack trace의 메시지와<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> 검색한 결과로 보건대 <code class=\"language-text\">Notification API</code>에서는 알림을 읽은 시간을 기록하는 <code class=\"language-text\">Confirm API</code>와 댓글을 Like 하는 <code class=\"language-text\">Comment Like API</code>에서 발생했고 <code class=\"language-text\">deadlock</code>과 관련되어 보였다.</p>\n<h3 id=\"deadlock\" style=\"position:relative;\"><a href=\"#deadlock\" aria-label=\"deadlock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deadlock</h3>\n<p>DB는 트랜잭션을 안전하게 수행하기 위해 lock을 사용한다. 그런데 트랜잭션들이 서로 필요한 lock을 가지고 있어 진행할 수 없는 상태가 되는 것이 deadlock이다. MySQL 문서에 있는 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-example.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">예제</a>를 보면 어떻게 deadlock이 발생하는지 보여준다.  </p>\n<blockquote>\n<p>클라이언트 A에서 share mode로 select하여 lock를 얻는다. share mode는 트랜잭션이 끝날 때까지 값이 변경되지 않도록 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">1.07</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> t <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.09</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t <span class=\"token keyword\">WHERE</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">SHARE</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+</span>\n<span class=\"token operator\">|</span> i    <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+</span>\n<span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------+</span></code></pre></div>\n<blockquote>\n<p>그리고, 클라이언트 B에서 트랜잭션을 시작하고 row를 삭제한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> t <span class=\"token keyword\">WHERE</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>삭제 작업은 <em>x</em> lock을<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> 필요로 합니다. 그리고 <em>s</em> lock이 있는 동안은 x lock을 획들 할 수 없다. A가 <em>s</em> lock을 가지고 있고 B의 요청은 queue로 전달된다.\n끝으로, A가 row를 삭제하려고 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> t <span class=\"token keyword\">WHERE</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nERROR <span class=\"token number\">1213</span> <span class=\"token punctuation\">(</span><span class=\"token number\">40001</span><span class=\"token punctuation\">)</span>: Deadlock found <span class=\"token keyword\">when</span> trying <span class=\"token keyword\">to</span> get <span class=\"token keyword\">lock</span><span class=\"token punctuation\">;</span>\ntry restarting <span class=\"token keyword\">transaction</span></code></pre></div>\n<blockquote>\n<p>deadlock은 이때 발생한다. A는 삭제 작업을 하기 위해 <em>x</em> lock이 필요하지만, B가 <em>x</em> lock에 대한 요청을 기다리고 있고 A가 lock을 해제하기를 기다리고 있기 때문이다. 결과적으로 InnoDB는 클라이언트 중 하나의 lock을 해제하고 에러를 발생시킨다.</p>\n</blockquote>\n<h3 id=\"confirm-api\" style=\"position:relative;\"><a href=\"#confirm-api\" aria-label=\"confirm api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Confirm API</h3>\n<p><code class=\"language-text\">Confirm API</code>는 알림을 읽은 시간을 기록하는 API이다. 30일 이내의 최대 50 건의 알림을 가져와서 읽지 않은 알림만 현재 시각으로 갱신하는 로직이다. (<code class=\"language-text\">SimpleJpaRepository</code>의 <code class=\"language-text\">saveAll()</code>을 사용한다.)결국, SELECT와 UPDATE하는 로직인데 UPDATE 할 때는 <em>x</em> lock이 필요하겠지만 위의 예제처럼 SELECT할 때 share mode를 쓰거나 하지 않아 <em>s</em> lock이 필요하지 않다. 그렇다면 왜 발생한 걸까?</p>\n<p><code class=\"language-text\">SHOW ENGINE INNODB STATUS</code> 명령어의 <code class=\"language-text\">LATEST DETECTED DEADLOCK</code> 항목에 아래의 내용이 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n2020-05-30 08:47:32 2b246ec44700\n*** (1) TRANSACTION:\nTRANSACTION 828466999, ACTIVE 0 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 3 lock struct(s), heap size 376, 2 row lock(s), undo log entries 1\nMySQL thread id 18147477, OS thread handle 0x2b1effe82700, query id 1061155561\nupdate notification set contents='Kelas Rahasia Sang Permaisuri \\\"gukguk item tsundere sedang guguk putih masochist 🤭🤣\n\\\"', created='2020-05-30 08:44:15', icon_uri='icon/notification/x2/comment.jpg.webp', landing_uri='idn.kakaopage://comment/3311/151580/791309', push_id='LIKE_COMMENT-791309-1590828254', title='\\'athyy dan 58orang lainya\\' telah menyukai komentar kamu.', type_code='LIKE_COMMENT', user_id='idnub265f96b23bb86', viewed='2020-05-30 08:47:32.551' where id=199064878\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 13 page no 6567228 n bits 48 index `PRIMARY` of table `page-notification`.`notification` trx id 828466999 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 48 PHYSICAL RECORD: n_fields 12; compact format; info bits 0\n\n*** (2) TRANSACTION:\nTRANSACTION 828466998, ACTIVE 0 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 3 lock struct(s), heap size 376, 2 row lock(s), undo log entries 1\nMySQL thread id 18147633, OS thread handle 0x2b1eff2c5700, query id 1061155560\nupdate notification set contents='Adonis \"masih gagal paham😐😶😶\"', created='2020-05-30 08:25:53.0', icon_uri='icon/notification/x2/comment.jpg.webp', landing_uri='idn.kakaopage://comment/2267/24187/1213101', push_id='REPLY_TO_COMMENT-1213101-1590827152', title='byun baekhyun meninggalkan jawaban di komentarmu.', type_code='REPLY_TO_COMMENT', user_id='idnub265f96b23bb86', viewed='2020-05-30 08:47:32.551' where id=199063150\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 13 page no 6567228 n bits 48 index `PRIMARY` of table `page-notification`.`notification` trx id 828466998 lock_mode X locks rec but not gap\nRecord lock, heap no 48 PHYSICAL RECORD: n_fields 12; compact format; info bits 0\n[bitmap0 of 16 bytes in hex: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 ]\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 13 page no 6567189 n bits 52 index `PRIMARY` of table `page-notification`.`notification` trx id 828466998 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 52 PHYSICAL RECORD: n_fields 12; compact format; info bits 0</code></pre></div>\n<p>이 내용으로 알 수 있는 사실은 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">TRANSACTION 1</code>은 id가 199064878인 row를 UPDATE 한다. </li>\n<li><code class=\"language-text\">TRANSACTION 2</code>는 id가 199063150인 row를 UPDATE 한다. </li>\n<li><code class=\"language-text\">TRANSACTION 1</code>은 UPDATE하는 record에 대한 <em>x</em> lock이 필요하여 기다리고 있다.</li>\n<li><code class=\"language-text\">TRANSACTION 2</code>는 UPDATE하는 record에 대한 <em>x</em> lock이 필요하여 기다리고 있다.</li>\n<li><code class=\"language-text\">TRANSACTION 2</code>는 <code class=\"language-text\">TRANSACTION 1</code>이 기다리고 있는 record의 <em>x</em> lock을 가지고 있다.</li>\n</ul>\n<p>이 과정대로 쿼리를 수행하면 재현이 가능하다.</p>\n<blockquote>\n<p>테이블을 생성.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>val<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>위와 같이 데이터를 입력.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"> <span class=\"token operator\">+</span><span class=\"token comment\">-------------+</span>\n <span class=\"token operator\">|</span> id   <span class=\"token operator\">|</span> val  <span class=\"token operator\">|</span>\n <span class=\"token operator\">+</span><span class=\"token comment\">------+------+</span>\n <span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span>\n <span class=\"token operator\">+</span><span class=\"token comment\">------+------+</span>\n <span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n <span class=\"token operator\">+</span><span class=\"token comment\">------+------+</span></code></pre></div>\n<blockquote>\n<p>첫 번째 클라이언트에서 id가 1인 record의 <em>x</em> lock 획득.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Client A</span>\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> deadlock <span class=\"token keyword\">SET</span> val <span class=\"token operator\">=</span> <span class=\"token number\">101</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>두 번째 클라이언트에서 id가 2인 record의 <em>x</em> lock 획득.\n그리고 id가 1인 record의 <em>x</em> lock을 얻기 위해 대기.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Client B</span>\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> deadlock <span class=\"token keyword\">SET</span> val <span class=\"token operator\">=</span> <span class=\"token number\">101</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> deadlock <span class=\"token keyword\">SET</span> val <span class=\"token operator\">=</span> <span class=\"token number\">101</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>다시 첫 번째 클라이언트에서 id가 2인 record의 <em>x</em> lock 획득 시도.\n여기서 deadlock발생.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Client A</span>\n<span class=\"token keyword\">UPDATE</span> deadlock <span class=\"token keyword\">SET</span> val <span class=\"token operator\">=</span> <span class=\"token number\">101</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>재현 방법은 어렵지 않은데 위의 과정처럼 하나의 트랜잭션에서 2개 이상의 UPDATE명령을 실행해야 발생한다. 하지만 나는 트랜잭션을 사용한 적이 없었는데 deadlock이 발생한 것이 의아했다. 그러다가 <code class=\"language-text\">saveAll()</code> 코드를 확인해 보았는데 여기에 트랜잭션 어노테이션이 사용되고 있었다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">saveAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">></span></span> entities<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제는 deadlock이 발생했을 때의 상황을 알 것도 같다. </p>\n<ol>\n<li>짦은 시간 안에 <code class=\"language-text\">Confirm API</code>가 동시에 호출되어</li>\n<li>읽은 시간을 업데이트하기 위해 알림 목록을 <code class=\"language-text\">saveAll()</code>로 업데이트할 때</li>\n<li>같은 알림목록을 대상으로 하여도 업데이트가 수행되는 순서는 보장되지 않기 때문에</li>\n<li>서로 다른 트랜잭션에서 lock을 필요로하는 상황으로 deadlock 발생한 것이다.</li>\n</ol>\n<h3 id=\"comment-like-api\" style=\"position:relative;\"><a href=\"#comment-like-api\" aria-label=\"comment like api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment Like API</h3>\n<p><code class=\"language-text\">Comment Like API</code>는 댓글의 좋아요 버튼을 누를 때를 호출되는 API이다. comment, comment_like 2개의 테이블을 사용한다. comment_like에는 사용자가 댓글에 좋아요 설정 또는 취소한 상태를 comment에는 댓글과 좋아요 숫자를 필드로 가지고 있다. 아래는 2개의 테이블을 간략화한 스키마이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>comment<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>comment<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>like_count<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>comment_like<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>comment_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>is_like<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">tinyint</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">CONSTRAINT</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>fk_commentLike_commentId<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>comment_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>comment<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이것도 <code class=\"language-text\">SHOW ENGINE INNODB STATUS</code>로 deadlock 정보를 찾아보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n2020-06-10 17:16:42 2b221d246700\n*** (1) TRANSACTION:\nTRANSACTION 1124624957, ACTIVE 0 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 5 lock struct(s), heap size 376, 2 row lock(s), undo log entries 1\nMySQL thread id 5148115, OS thread handle 0x2b1c5c38a700, query id 1602285300 update comment set like_count=like_count+1, updated='2020-06-10 17:16:42.991' where id=1105292\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 8 page no 22700 n bits 36 index `PRIMARY` of table `page-community`.`comment` trx id 1124624957 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 36 PHYSICAL RECORD: n_fields 15; compact format; info bits 0\n\n*** (2) TRANSACTION:\nTRANSACTION 1124624956, ACTIVE 0 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 5 lock struct(s), heap size 376, 2 row lock(s), undo log entries 1\nMySQL thread id 5148104, OS thread handle 0x2b1cada44700, query id 1602285299 update comment set like_count=like_count+1, updated='2020-06-10 17:16:42.988' where id=1105292\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 8 page no 22700 n bits 36 index `PRIMARY` of table `page-community`.`comment` trx id 1124624956 lock mode S locks rec but not gap\nRecord lock, heap no 36 PHYSICAL RECORD: n_fields 15; compact format; info bits 0\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 8 page no 22700 n bits 36 index `PRIMARY` of table `page-community`.`comment` trx id 1124624956 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 36 PHYSICAL RECORD: n_fields 15; compact format; info bits 0</code></pre></div>\n<p><code class=\"language-text\">Confirm API</code>와 유사하지만 두 개의 트랜잭션이 하나의 row를 업데이트하고, 두 번째 트랜잭션이 <em>x</em>가 아닌 <em>S</em> lock을 가지고 있는 것이 눈에 띈다. 이 로직에서도 명시적으로 lock을 선언한 부분이 없는데 왜 deadlock이 발생한 것일까?</p>\n<p>InnoDB에서 lock을 설정하는 경우를 나열해놓은 <a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-locks-set.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문서</a>에서 Foreign Key 조건에서 <em>s</em> lock을 설정한다고 나와있다.</p>\n<blockquote>\n<p>FOREIGN KEY가 테이블에 정의되어 있다면 제약조건을 확인해야 할 모든 insert, update, delete는 제약조건을 참조하고 있는 record에 shared lock을 설정한다.\n또한, InnoDB는 제약조건이 실패하는 경우에도 lock을 설정한다.</p>\n</blockquote>\n<p>이 내용대로 추론해보면 아래의 과정으로 재현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock_child<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>val<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>fk_deadlock_id<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">CONSTRAINT</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>fk_deadlock_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>deadlock 테이블을 참조하는 deadlock_child 테이블 생성.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Client A </span>\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock_child<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>val<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>첫 번째 클라이언트에서 자식 테이블에 insert하여 deadlock 테이블의 id가 1인 record의 <em>s</em> lock 획득.  </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Client B</span>\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock_child<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>deadlock_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>val<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>두 번째 클라이언트에서 동일하게 deadlock 테이블의 id가 1인 record의 <em>s</em> lock 획득.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Client A</span>\n<span class=\"token keyword\">UPDATE</span> deadlock <span class=\"token keyword\">SET</span> val <span class=\"token operator\">=</span> <span class=\"token number\">101</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>첫 번째 클라이언트에서 <em>x</em> lock 획득을 위해 대기.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Client B</span>\n<span class=\"token keyword\">UPDATE</span> deadlock <span class=\"token keyword\">SET</span> val <span class=\"token operator\">=</span> <span class=\"token number\">101</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>두 번째 클라이언트도 <em>x</em> lock이 필요. 여기서 deadlock 발생.</p>\n</blockquote>\n<p>이것도 짧은 시간 안에 같은 API가 동시에 요청되어 발생한 문제라고 여겨진다.</p>\n<h3 id=\"해결은-어떻게-하나\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EB%82%98\" aria-label=\"해결은 어떻게 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결은 어떻게 하나?</h3>\n<p>이것 또한 MySQL <a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlocks-handling.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문서</a>에서 deadlock를 어떻게 최소화할 수 있는지 알려준다. 기본적으로는 deadlock이 발생할 때는 재시도 하라고 하고 있으며 트랜잭션을 짧게 설정하라고 하고 있다. <code class=\"language-text\">Confirm API</code>의 경우에는 하나의 트랜잭션에서 수행되는 쿼리가 최대 50개가 될 수 있기 때문에 <code class=\"language-text\">UPDATE ... WHERE IN</code> 으로 변경하려고 한다. (2개의 row만 업데이트하는 경우에도 deadlock이 발생하기도 했다.)<br>\n<code class=\"language-text\">Comment Like API</code>는 부모 테이블을 먼저 업데이트하면 deadlock이 발생하지 않는다. 쿼리에 필요한 lock을 미리 획득하기 때문인데 순서를 변경하여도 로직에는 영향을 주지 않기 때문에 순서를 바꿔도 무방하다.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Deadlock found when trying to get lock; try restarting transaction</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p><a href=\"https://jeong-pro.tistory.com/94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jeong-pro.tistory.com/94</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","excerpt":"내가 지금 회사에서 개발한 것 중에는 사용자에게 보이는 알림과 작품, 시스템에 대한 알림 설정을 관리하는 가 있고 댓글과 작품의 Rating, Like…","tableOfContents":"<ul>\n<li><a href=\"/cannot-acquire-lock-exception-research/#cannotacquirelockexception\">CannotAcquireLockException</a></li>\n<li><a href=\"/cannot-acquire-lock-exception-research/#deadlock\">Deadlock</a></li>\n<li><a href=\"/cannot-acquire-lock-exception-research/#confirm-api\">Confirm API</a></li>\n<li><a href=\"/cannot-acquire-lock-exception-research/#comment-like-api\">Comment Like API</a></li>\n<li><a href=\"/cannot-acquire-lock-exception-research/#%ED%95%B4%EA%B2%B0%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EB%82%98\">해결은 어떻게 하나?</a></li>\n</ul>","fields":{"slug":"/cannot-acquire-lock-exception-research/"},"frontmatter":{"title":"CannotAcquireLockException과 Deadlock","date":"2020년 6월 19일 금요일","tags":["CannotAcquireLockException","deadlock"],"keywords":["Running Out Of Coins.","bgroot"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/cannot-acquire-lock-exception-research/","series":[],"lastmod":"0001-01-01"}},"staticQueryHashes":["3649515864","63159454"]}